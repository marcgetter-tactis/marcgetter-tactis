{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 */
#}

{{ attach_library('usdoj_uswds/faqs') }}
{% set title_classes = [
    label_display == 'visually_hidden' ? 'usa-sr-only',
    "text-primary-darker",
    "text-center",
    "field_header"

] %}

{% set accordionWrapper_classes = [
    "usa-accordion",
    "margin-bottom-0",
    field_name
] %}


<div class="paragraph-questions paragraph-faqs">
    {% if not label_hidden %}
        <h2{{ title_attributes.addClass(title_classes) }}>{{ label }}</h2>
    {% endif %}
    <div {{ attributes.addClass(accordionWrapper_classes) }} aria-multiselectable="true">
        {% for item in items %}
            {# ToDo-NP: Port to Macro #}
            {% set title = item.content['#paragraph'].field_question.value %}
            {% set paragraphID = item.content['#paragraph'].id() %}
            {% set bodyContentRaw = item.content['#paragraph'].field_answer.value %}
            {% set bodyMarkupType = item.content['#paragraph'].field_answer.format %}
            {% set bodyFormatted = bodyContentRaw | check_markup(bodyMarkupType) %}

            <div class="usa-accordion__item">
                <h4 class="usa-accordion__heading">
                    <button
                            class="usa-accordion__button"
                            {#Enable during refactoring to allow for user to toggle if first item should be open#}
                            {#aria-expanded= {{ loop.index == 1 ? "true" : "false" }}#}
                            aria-expanded="false"
                            aria-controls="faq-{{ paragraphID }}"
                    >
                        {{ title }}
                    </button>
                </h4>
                <div id="faq-{{ paragraphID }}" class="usa-accordion__content usa-prose">
                    {{ bodyFormatted }}
                </div>
            </div>
        {% endfor %}
    </div>
</div>

{#ToDo-NP:Refactor logic of variable creation and apply IF multiple logic if needed#}
{#
{% if label_hidden %}

    <div class="usa-accordion margin-bottom-7" aria-multiselectable="true">
        {% if multiple %}
            <div{{ attributes.addClass('field__items') }}>
                {% for item in items %}
                    {% set title = item.content['#paragraph'].field_question.value %}
                    {% set bodyContentRaw = item.content['#paragraph'].field_answer.value | check_markup('wysiwyg') %}
                    {% set bodyMarkupType = item.content['#paragraph'].field_answer.format | check_markup('wysiwyg') %}
                    {% set bodyFormatted = bodyContentRaw | check_markup(bodyMarkupType) %}

                    <div{{ item.attributes.addClass('field__item') }}>{{ item.content }}</div>
                {% endfor %}
            </div>
        {% else %}
            {% for item in items %}
                <div>
                    <div{{ attributes.addClass(field_name) }}>{{ item.content }}</div>
                </div>
            {% endfor %}
        {% endif %}
    </div>

{% else %}

    <div{{ attributes }}>
        <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
        <div class="usa-accordion margin-bottom-7" aria-multiselectable="true">
            {% if multiple %}
                <div>
            {% endif %}
                {% for item in items %}
                    {% set title = item.content['#paragraph'].field_question.value %}
                    {% set bodyContentRaw = item.content['#paragraph'].field_answer.value %}
                    {% set bodyMarkupType = item.content['#paragraph'].field_answer.format %}
                    {% set bodyFormatted = bodyContentRaw | check_markup(bodyMarkupType) %}
                    {{ bodyFormatted }}

                    <div{{ item.attributes.addClass(field_name) }}>{{ item.content }}</div>

                {% endfor %}
            {% if multiple %}
                </div>
            {% endif %}
        </div>
    </div>

{% endif %}
#}
