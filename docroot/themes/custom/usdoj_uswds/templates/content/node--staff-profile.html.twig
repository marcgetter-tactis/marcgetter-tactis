{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% import '@usdoj_uswds/macros/usdoj_uswds_macros.twig'as usdojMacros %}
{% import '@uswds_base/navigation/menu--sidebar_first.html.twig'as sidebar_first %}

{% set classes = [
    "grid-row",
    "grid-gap"
] %}

{% set name = content.field_name %}
{% set position = content.field_position %}
{% set portrait = content.field_portrait %}
{% set portrait_download = content.field_portrait_download %}
{% set portrait_download_url = node.field_portrait_download|file_url %}
{% set body = content.field_body %}
{% set updatedDate = node.changed.value|date("F j, Y") %}
{% set serviceDateStart = content.field_dates_service['#items'][0].value %}
{% set serviceDateEnd = content.field_dates_service['#items'][0].end_value %}
{% set component = content.field_component %}


{% set asideNav = 'sidebar-menu' %}
{% set renderedAsideNav = drupal_menu(asideNav) %}

<article {{ attributes.addClass(classes) }}>
	{# Below would render the <sidebar-menu> using  <menu--sidebar_first.html.twig>. This method has been disabled as the sidebar menu is rendered outside this template via Block Layouts in Drupal #}
	{# <aside class="usa-layout-docs__sidenav desktop:grid-col-3 display-none desktop:display-block desktop:grid-col-3 ">
	
	        {% if asideNav %}
	    #}
	{# The base twig template from USWDS is fine, so let's reference it here #}
	{#
	    {{ sidebar_first.menu_links(renderedAsideNav['#items'],0,attributes) }}
	{% endif %}
	
	</aside> #}

		<div class="usa-layout-docs__main desktop:grid-col-fill node-content"> {# {% if asideNav %} #}
		{# #}
		{# We need a different UI for the asideNav on mobile, so let's handle its styling differently #}
		{# {{ usdojMacros.mobileSideNav(asideNav,"News") }} #}
		{# {% endif %} #}

			<div class="profile-details profile-details__wrapper display-flex margin-bottom-4"> {% if portrait|render|trim is not empty %}
				<div class="profile-details__media">
					<div class="node-profile-image">{{ portrait }}</div>
				</div>

			{% endif %}
			<div class="profile-details__details">
				<div class="node-type">{{ node.type.entity.label }}</div>

				{{ title_prefix }}
				{% if page %}
					<h1 class="page-title">{{ name|render|trim is not empty ? name : label }}</h1>
				{% else %}
					<h2{{title_attributes.addClass('margin-0page-title')}}>
						<a href="{{ url }}" rel="bookmark">{{ name|render|trim is not empty ? name : label }}</a>

					</h2>
				{% endif %}
				{{ title_suffix }}
				<div class="node-position margin-bottom-1">{{ position }}</div>
				{% if portrait|render|trim is not empty %}
					<div class="node-download margin-bottom-2">
						<a href="{{ portrait_download_url }}" title="download portrait image" download>Download Image</a>
					</div>
				{% endif %}
				<div class="node-share">{{ drupal_block('sharing_block', wrapper=false) }}</div>

			</div>
		</div>

		<div{{content_attributes}}>

			{% if body|render|trim is not empty %}
				<div class="node-body">{{ body }}</div>
			{% endif %}

			<div class="node-dates-service margin-bottom-4">
				<div class="label text-bold">Dates of Service</div>
				<span class="date-start">{{ serviceDateStart|slice(0,4) }}</span>
				-
				<span class="date-end">{{ serviceDateEnd ? serviceDateEnd|slice(0,4) : 'Present' }}</span>
			</div>

			{% if updatedDate|render|trim is not empty %}
				<div class="node-updated-date">Updated
					{{ updatedDate }}</div>
			{% endif %}

		</div>
	</div>
</article>
